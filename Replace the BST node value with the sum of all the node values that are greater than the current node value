Replace the BST node value with the sum of all the node values that are greater than the current node value

http://www.careercup.com/question?id=13394676

===========================================================================
public int sumOfAllGreater(TreeNode root, int i){
           	if(root == null){
			return i;
		}
		else if(root.leftChild == null && root.rightChild == null){
			root.data += i;
			return root.data;
		}
		
		int tmp = sumOfAllGreater(root.rightChild, i);
		root.data += tmp;
		tmp = sumOfAllGreater(root.leftChild, root.data);
		return tmp;
	}
===========================================================================
1. Inorder travarsal.
2. currnode --> data += prevNode-->data

// Trying to write the code, only bad part is the global variable, in    
//Java though we can use as private variable what I have tried here.
private Node prevNode = null;
public void PostOrderSum( Node node ) {
          if( node == null ) return;

          PostOrderSum( node.right );
          PostOrderSum( node.left );
          
          if( prevNode  != null ) {
                     node.data += prevNode.data;
           }

          prevNode = node;
     
}

===========================================================================






I guess from the given node in BST, there are two possible
points where the value of the nodes are bigger than the given node: 
1. the right child node and its children/tree 
2. the parent node and the parent's right children where 
the the given node is a node located in the left tree of that parent node. 

So here is the simple code to do so:


public void replace(Node node) {
           if (node == null) return;
           if (node.right != null) {
                 node.value = sum(node.right);
           }

            Node parent = node.parent;
            while (parent != null && node == parent.right) {
               //keep looping until it reaches a parent where the given node is located on the left sub tree
                node = node.parent;
                parent = node.parent;
            }

            if (parent != null) {
                   node.value += parent.value + sum(parent.right);
            }
     }

     private int sum(Node node) {
          if (node == null) return 0;
          return node.value + sum(node.left) + sum(node.right);
     }
