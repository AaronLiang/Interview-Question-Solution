int count(struct tnode *p)
{
        if( p == NULL)
                return(0);
        else
                if( p->lchild == NULL && p->rchild == NULL)
                        return(1);
                else
                        return(1 + (count(p->lchild) + count(p->rchild)));
}


-------------------------------------------------------------
int numnodes(Node tree) {
        if (tree == null)
         return 0;
        return 1 + numnodes(tree.leftchild())+ numnodes(tree.rightsib());
}

--------------------------------------------------------------------
public int heightOfBinaryTree(Node node)

{
    if (node == null)
    {
        return 0;
    }
    else
    {
        return 1 +
        Math.max(heightOfBinaryTree(node.left),
            heightOfBinaryTree(node.right));
    }
}
--------------------------------------------------------
http://www.cs.usfca.edu/~galles/cs245/lecture/lecture9.pdf

-----------------------------------------------------------
int countLeaves(Node node){
  if( node == null )
    return 0;
  if( node.left == null && node.right == null ) {
    return 1;
  } else {
    return countLeaves(node.left) + countLeaves(node.right);
  }
}
